import convex convex_body brunn_minkowski microid
  measure set_pi
  init.data.fin.ops

open_locale pointwise
open_locale topological_space
open_locale nat

-- needed to get decidable_eq for sets!
open classical
local attribute [instance] prop_decidable

variables {V : Type} [inner_product_space ‚Ñù V] [finite_dimensional ‚Ñù V]


def lfe --locally face equivalent
(U : set (metric.sphere (0 : V) 1))
(P Q : polytope V) :=
‚àÄ u : metric.sphere (0 : V) 1,
u ‚àà U ‚Üí vector_span ‚Ñù (normal_face P.val u) = vector_span ‚Ñù (normal_face Q.val u)

lemma lfe_refl (P : polytope V) : lfe ‚ä§ P P :=
begin
  tauto,
end

lemma lfe_symm
{U : set (metric.sphere (0 : V) 1)}
{P Q : polytope V}
(h : lfe U P Q) : lfe U Q P :=
begin
  intros v hv,
  symmetry,
  exact h v hv,
end

lemma lfe_trans
{U‚ÇÅ U‚ÇÇ : set (metric.sphere (0 : V) 1)}
{P Q R : polytope V}
(h‚ÇÅ : lfe U‚ÇÅ P Q)
(h‚ÇÇ : lfe U‚ÇÇ Q R) : lfe (U‚ÇÅ ‚à© U‚ÇÇ) P R :=
begin
  intros v hv,
  simp only [set.mem_inter_eq] at hv,
  simp only [h‚ÇÅ v hv.1, h‚ÇÇ v hv.2],
end

def in_combinatorial_closure
(u : metric.sphere (0 : V) 1)
(S : set (convex_body V))
(K : convex_body V) :=
‚àÄ Ps : multiset (convex_body V), dim V = Ps.card + 1 ‚Üí
u ‚àà msupport (bm.area (K ::‚Çò Ps)) ‚Üí
u ‚àà closure (‚ãÉ L ‚àà S, msupport (bm.area (L ::‚Çò Ps)))

lemma comb_cl_of_lfe
{U : set (metric.sphere (0 : V) 1)}
{u : metric.sphere (0 : V) 1}
{t : ‚Ñï ‚Üí polytope V}
{S : set (polytope V)}
{tl : convex_body V}
(hU : is_open U)
(uU : u ‚àà U)
(tt : filter.tendsto (Œª n, convex_body_of_polytope V (t n))
  filter.at_top (ùìù tl))
(hl : ‚àÄ n : ‚Ñï, ‚àÉ P ‚àà S, lfe U (t n) P) :
in_combinatorial_closure u (convex_body_of_polytope V '' S)
tl := sorry