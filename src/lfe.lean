import convex convex_body brunn_minkowski microid
  measure set_pi
  init.data.fin.ops

open_locale pointwise
open_locale topological_space
open_locale nat

-- needed to get decidable_eq for sets!
open classical
local attribute [instance] prop_decidable

variables {V : Type} [inner_product_space ‚Ñù V] [finite_dimensional ‚Ñù V]


def lfe --locally face equivalent
(U : set (metric.sphere (0 : V) 1))
(P Q : polytope V) :=
‚àÉ (x : V) (c : ‚Ñù), c > 0 ‚àß
bm.œÑ (convex_body_of_polytope P) U =
{x} + c ‚Ä¢ (bm.œÑ (convex_body_of_polytope Q) U)

lemma lfe_refl (P : polytope V) : lfe ‚ä§ P P :=
begin
  refine ‚ü®0, 1, zero_lt_one, _‚ü©,
  simp only [one_smul, set.singleton_add, zero_add, set.image_id'],
end

lemma lfe_symm
{U : set (metric.sphere (0 : V) 1)}
{P Q : polytope V}
(h : lfe U P Q) : lfe U Q P :=
begin
  obtain ‚ü®x, c, cpos, hxc‚ü© := h,
  refine ‚ü®-c‚Åª¬π ‚Ä¢ x, c‚Åª¬π, inv_pos_of_pos cpos, _‚ü©,
  rw [hxc, smul_add, ‚Üêadd_assoc],
  simp only [neg_smul, set.smul_set_singleton,
  set.singleton_add_singleton, add_left_neg,
  set.singleton_add],
  simp only [subtype.val_eq_coe, set.image_add_left, neg_neg, set.preimage_add_left_singleton, add_left_neg, set.singleton_add,
  zero_add, set.image_id'],
  rw [inv_smul_smul‚ÇÄ (ne_of_gt cpos)],
end

lemma lfe_mono
{U‚ÇÅ U‚ÇÇ : set (metric.sphere (0 : V) 1)}
{P Q : polytope V}
(hPQ : lfe U‚ÇÇ P Q)
(hU : U‚ÇÅ ‚äÜ U‚ÇÇ) :
lfe U‚ÇÅ P Q :=
begin
  obtain ‚ü®x, c, cpos, hxc‚ü© := hPQ,
  refine ‚ü®x, c, cpos, _‚ü©,
  simp only [œÑ_mono hU, hxc],
  rw [add_comm],
  simp only [face_translate, face_smul cpos],
  rw [add_comm],
  rw [set.smul_set_Union‚ÇÇ, set.Union‚ÇÇ_add],
end

lemma lfe_trans
{U‚ÇÅ U‚ÇÇ : set (metric.sphere (0 : V) 1)}
{P Q R : polytope V}
(h‚ÇÅ : lfe U‚ÇÅ P Q)
(h‚ÇÇ : lfe U‚ÇÇ Q R) : lfe (U‚ÇÅ ‚à© U‚ÇÇ) P R :=
begin
  obtain ‚ü®x‚ÇÅ, c‚ÇÅ, c‚ÇÅpos, hxc‚ÇÅ‚ü© := lfe_mono h‚ÇÅ (set.inter_subset_left _ _),
  obtain ‚ü®x‚ÇÇ, c‚ÇÇ, c‚ÇÇpos, hxc‚ÇÇ‚ü© := lfe_mono h‚ÇÇ (set.inter_subset_right _ _),
  refine ‚ü®x‚ÇÅ + c‚ÇÅ ‚Ä¢ x‚ÇÇ, c‚ÇÅ * c‚ÇÇ, _, _‚ü©,
  {
    exact mul_pos c‚ÇÅpos c‚ÇÇpos,
  },
  {
    rw [hxc‚ÇÅ, hxc‚ÇÇ],
    simp only [smul_add, smul_smul, ‚Üêadd_assoc],
    simp only [set.smul_set_singleton, set.singleton_add_singleton],
  },
end

def in_combinatorial_closure
(u : metric.sphere (0 : V) 1)
(S : set (convex_body V))
(K : convex_body V) :=
‚àÄ Ps : multiset (convex_body V), dim V = Ps.card + 2 ‚Üí
u ‚àà msupport (bm.area (K ::‚Çò Ps)) ‚Üí
u ‚àà closure (‚ãÉ L ‚àà S, msupport (bm.area (L ::‚Çò Ps)))

/- lemma mem_closure_of_mem_closure_nhd
{A U : set V} {x : V} (hU : U ‚àà ùìù x) :
x ‚àà closure A ‚Üî x ‚àà closure (A ‚à© U) := sorry

lemma mem_closure_of_mem_closure_nhd'
{A B U : set V} {x : V} (hU : U ‚àà ùìù x) (hAB : A ‚à© U = B ‚à© U) :
x ‚àà closure A ‚Üî x ‚àà closure B := sorry -/

lemma mem_closure_of_subset_within_of_mem_closure
{Œ± : Type} [topological_space Œ±]
{A B U : set Œ±} {x : Œ±} (hU : U ‚àà ùìù x) (hAB : A ‚à© U ‚äÜ B ‚à© U) :
x ‚àà closure A ‚Üí x ‚àà closure B :=
begin
  simp only [mem_closure_iff_cluster_pt, cluster_pt_iff],
  intros h X hX W hW,
  let W' := W ‚à™ A,
  have W'p : W' ‚àà filter.principal A,
  {
    apply set.subset_union_right,
  },
  obtain ‚ü®x, ‚ü®xX, xU‚ü©, xW'‚ü© := h (filter.inter_mem hX hU) W'p,
  refine ‚ü®x, xX, _‚ü©,
  cases xW' with xW xA,
  {
    exact xW,
  },
  {
    apply hW,
    apply set.inter_subset_left,
    refine hAB ‚ü®xA, xU‚ü©,
  },
end

/- lemma polytope_area_eq_face_area
{C : multiset (convex_body V)}
{P : polytope V}
(hPC : bm.is_area_coll (convex_body_of_polytope P ::‚Çò C) ‚ä§)
{U : set (metric.sphere (0 : V) 1)} {u : metric.sphere (0 : V) 1}
(hU‚ÇÅ : measurable_set U)
(hU‚ÇÇ : ‚àÄ v : metric.sphere (0 : V) 1, v ‚àà U ‚Üí normal_face P.val v.val = normal_face P.val u.val) :
bm.area (convex_body_of_polytope P ::‚Çò C) U =
bm.area ((convex_body_of_polytope P).normal_face u.val ::‚Çò C) U :=
begin
  refine bm.area_determined_by_œÑ hPC _ hU‚ÇÅ _,
  {
    refine bm.is_area_coll_cons_of_head_subset _ hPC,
    apply normal_face_subset,
  },
  {
    intro M,
    simp only [bm.œÑ],
    congr,
    funext v,
    congr,
    funext hv,
    simp only [subtype.val_eq_coe, normal_face_add'],
    congr' 1,
    simp only [convex_body.normal_face, convex_body_of_polytope, subtype.val_eq_coe, subtype.coe_mk],
    simp only [subtype.val_eq_coe, subtype.coe_mk] at hU‚ÇÇ,
    rw [‚ÜêhU‚ÇÇ v hv],
    simp only [normal_face_idem_poly],
  },
end -/

-- MOVETO brunn_minkowski.lean
lemma area_determined_by_œÑ
{C : multiset (convex_body V)}
{K L : convex_body V}
(hC : bm.is_area_coll (K ::‚Çò C))
(hD : bm.is_area_coll (L ::‚Çò C))
{U : set (metric.sphere (0 : V) 1)}
(hU : measurable_set U)
(h : bm.œÑ K U = bm.œÑ L U) :
bm.area (K ::‚Çò C) U = bm.area (L ::‚Çò C) U :=
begin
  apply bm.area_determined_by_œÑ_add hC hD hU,
  intro M,
  exact œÑ_add_right_eq h,
end

-- MOVETO multiset.lean
@[simp]
lemma multiset.all_cons {Œ± : Type}
(p : Œ± ‚Üí Prop) (a : Œ±) (C : multiset Œ±) :
multiset_all p (a ::‚Çò C) ‚Üî p a ‚àß multiset_all p C :=
begin
  simp only [multiset_all, multiset.mem_cons, forall_eq_or_imp],
end

-- MOVETO brunn_minkowski.lean
lemma is_area_coll_smul_cons
{K : convex_body V}
{C : multiset (convex_body V)}
(h : bm.is_area_coll (K ::‚Çò C))
(c : nnreal) :
bm.is_area_coll (c ‚Ä¢ K ::‚Çò C) :=
begin
  simp only [bm.is_area_coll, multiset.card_cons] at h ‚ä¢,
  exact h,
end

lemma is_area_coll_add_singleton_cons
{K : convex_body V} {x : V}
{C : multiset (convex_body V)}
(h : bm.is_area_coll (K ::‚Çò C)) :
bm.is_area_coll ((K + {x}) ::‚Çò C) :=
begin
  simp only [bm.is_area_coll, multiset.card_cons] at h ‚ä¢,
  exact h,
end

lemma area_pos_iff_of_lfe_aux
{P Q : polytope V} {U : set (metric.sphere (0 : V) 1)}
{Ks : multiset (convex_body V)}
(hPQ : lfe U P Q)
(ac‚ÇÅ : bm.is_area_coll (convex_body_of_polytope P ::‚Çò Ks))
(ac‚ÇÇ : bm.is_area_coll (convex_body_of_polytope Q ::‚Çò Ks))
(hU‚ÇÅ : measurable_set U) :
‚àÉ c : nnreal, 0 < c ‚àß
bm.area (convex_body_of_polytope Q ::‚Çò Ks) U =
c ‚Ä¢ bm.area (convex_body_of_polytope P ::‚Çò Ks) U :=
begin
  obtain ‚ü®x, c, cpos, hcx‚ü© := lfe_symm hPQ,
  let c' := c.to_nnreal,
  have c'pos := real.to_nnreal_pos.mpr cpos,
  refine ‚ü®c', c'pos, _‚ü©,
  let P' := (c' ‚Ä¢ convex_body_of_polytope P) + {x},
  have : bm.area (convex_body_of_polytope Q ::‚Çò Ks) U = bm.area (P' ::‚Çò Ks) U,
  {
    simp only [P'],
    apply area_determined_by_œÑ,
    {exact ac‚ÇÇ},
    {
      apply is_area_coll_add_singleton_cons,
      apply is_area_coll_smul_cons,
      exact ac‚ÇÅ,
    },
    exact hU‚ÇÅ,
    {
      rw [œÑ_translate, œÑ_smul, add_comm],
      rw [hcx],
      simp only [c', nnreal.smul_def, real.coe_to_nnreal _ (le_of_lt cpos)],
    },
  },
  convert this using 1,
  simp only [P'],
  rw [bm.area_cons_translate,
      bm.area_cons_smul],
  {
    simp only [measure_theory.finite_measure.coe_fn_smul_apply],
  },
  {
    exact ac‚ÇÅ,
  },
  {
    apply is_area_coll_smul_cons,
    exact ac‚ÇÅ,
  },
end

-- MOVETO brunn_minkowski.lean
@[simp]
lemma is_area_coll_top
(C : multiset (convex_body V)) :
bm.is_area_coll C ‚Üî dim V = C.card + 1 :=
begin
  simp only [bm.is_area_coll],
end

lemma area_pos_iff_of_lfe
{P Q : polytope V} {U : set (metric.sphere (0 : V) 1)}
{Ks : multiset (convex_body V)}
(hPQ : lfe U P Q)
(hKs : dim V = Ks.card + 2)
(hU : measurable_set U) :
bm.area (convex_body_of_polytope P ::‚Çò Ks) U > 0 ‚Üî
bm.area (convex_body_of_polytope Q ::‚Çò Ks) U > 0 :=
begin
  --have ac‚ÇÅ : bm.is_area_coll (convex_body_of_polytope P ::‚Çò Ks) ‚ä§,
  obtain ‚ü®c, cpos, hc‚ü© := area_pos_iff_of_lfe_aux hPQ _ _ hU, rotate, rotate,
  any_goals {simp only [is_area_coll_top, multiset.card_cons, add_assoc, hKs]},
  simp only [hc, cpos, gt_iff_lt, algebra.id.smul_eq_mul, canonically_ordered_comm_semiring.mul_pos, true_and],
end

-- MOVETO measure.lean
lemma finite_measure_mono
{Œº : measure_theory.finite_measure (metric.sphere (0 : V) 1)}
{U‚ÇÅ U‚ÇÇ : set (metric.sphere (0 : V) 1)}
(h : U‚ÇÅ ‚äÜ U‚ÇÇ) :
Œº U‚ÇÅ ‚â§ Œº U‚ÇÇ :=
begin
  simp only [measure_theory.finite_measure.coe_fn_eq_to_nnreal_coe_fn_to_measure],
  apply ennreal.to_nnreal_mono,
  {
    apply measure_theory.measure_ne_top,
  },
  {
    exact measure_theory.measure_mono h,
  },
end

lemma msupport_eq_of_lfe
{P Q : polytope V} {U : set (metric.sphere (0 : V) 1)}
{Ks : multiset (convex_body V)}
(hPQ : lfe U P Q)
(hKs : dim V = Ks.card + 2) :
msupport (bm.area (convex_body_of_polytope P ::‚Çò Ks)) ‚à© (interior U) =
msupport (bm.area (convex_body_of_polytope Q ::‚Çò Ks)) ‚à© (interior U) :=
begin
  ext,
  simp only [msupport, set.mem_inter_iff, set.mem_set_of],
  split,
  all_goals {
    rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
    refine ‚ü®_, h‚ÇÇ‚ü©,
    intros W hW‚ÇÅ hW‚ÇÇ,
    refine lt_of_lt_of_le _
      (finite_measure_mono (set.inter_subset_left W (interior U))),
    have : x ‚àà W ‚à© interior U := ‚ü®hW‚ÇÅ, h‚ÇÇ‚ü©,
    replace h‚ÇÅ := h‚ÇÅ _ this (is_open.inter hW‚ÇÇ is_open_interior),
    rw [area_pos_iff_of_lfe _ hKs] at h‚ÇÅ, exact h‚ÇÅ,
    {exact (hW‚ÇÇ.inter is_open_interior).measurable_set},
    {
      exact lfe_mono (by exact hPQ <|> exact (lfe_symm hPQ)) (subset_trans (set.inter_subset_right W (interior U)) interior_subset : W ‚à© interior U ‚äÜ U),
      -- refine lfe_mono (lfe_symm hPQ) _,
      -- refine subset_trans (set.inter_subset_right _ _) _,
      -- exact interior_subset, strange errors ????????
      -- -> all_goals!!!!
    },
  },
end

lemma comb_cl_of_lfe
{U : set (metric.sphere (0 : V) 1)}
{u : metric.sphere (0 : V) 1}
{t : ‚Ñï ‚Üí polytope V}
{S : set (polytope V)}
{tl : convex_body V}
(hU : U ‚àà nhds u)
(tt : filter.tendsto (Œª n, convex_body_of_polytope (t n))
  filter.at_top (ùìù tl))
(hl : ‚àÄ n : ‚Ñï, ‚àÉ P ‚àà S, lfe U (t n) P) :
in_combinatorial_closure u (convex_body_of_polytope '' S)
tl :=
begin
  intros Ps hdim hu,
  have := bm.area_continuous Ps _ _ _ tt,
  {
    have hiU : interior U ‚àà nhds u := interior_mem_nhds.mpr hU,
    replace := msupport_subset_of_tendsto _ _ this hu,
    simp only at this,
    refine mem_closure_of_subset_within_of_mem_closure
      hiU _ this,
    rw [set.Union‚ÇÇ_inter, set.Union_inter, set.Union_subset_iff],
    intro n,
    rcases hl n with ‚ü®P, hS, hlfe‚ü©,
    rw [msupport_eq_of_lfe hlfe hdim],
    refine subset_trans _ (set.subset_Union‚ÇÇ (convex_body_of_polytope P) _),
    {
      exact subset_refl _, -- why do I have to use subset_trans?
    },
    {
      exact set.mem_image_of_mem _ hS,
    },
  },
  {
    intro n,
    simp only [bm.is_area_coll],
    simp only [dim_finrank, finrank_top, multiset.card_cons, add_assoc] at hdim ‚ä¢,
    exact hdim,
  },
end