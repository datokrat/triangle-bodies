import linalg
  analysis.inner_product_space.basic
  analysis.convex.basic
  topology.basic
  topology.subset_properties
  topology.metric_space.basic
  linear_algebra.affine_space.affine_subspace
  data.set.basic
  data.set.pointwise
  topology.basic
  analysis.inner_product_space.dual

open_locale pointwise
open_locale topological_space

-- needed to get decidable_eq for sets!
open classical
local attribute [instance] prop_decidable

variables {V: Type} [inner_product_space ‚Ñù V] [finite_dimensional ‚Ñù V]

lemma convex_sum {A B : set V}
(Acv : convex ‚Ñù A) (Bcv : convex ‚Ñù B) :
convex ‚Ñù (A + B) :=
begin
  rintro - - ‚ü®xa, xb, xaA, xbB, rfl‚ü© ‚ü®ya, yb, yaA, ybB, rfl‚ü©,
  rintro a b a0 b0 ab1,
  refine ‚ü®a ‚Ä¢ xa + b ‚Ä¢ ya, a ‚Ä¢ xb + b ‚Ä¢ yb, _, _, _‚ü©,
  {
    apply Acv,
    all_goals {assumption},
  },
  {
    apply Bcv,
    all_goals {assumption},
  },
  {
    simp only [smul_add],
    abel,
  },
end

def is_convex_body (K : set V) : Prop :=
convex ‚Ñù K ‚àß is_compact K ‚àß set.nonempty K

lemma convex_convex_body {K : set V} (Kcv : is_convex_body K) :
convex ‚Ñù K := Kcv.1

def is_polytope (P : set V) : Prop :=
  ‚àÉ S : set V, S.finite ‚àß S.nonempty ‚àß P = convex_hull ‚Ñù S

def normal_face (K : set V) (u : V): set V :=
  { x | x ‚àà K ‚àß ‚àÄ y ‚àà K, ‚ü™x, u‚ü´_‚Ñù ‚â• ‚ü™y, u‚ü´_‚Ñù }

lemma mem_normal_face {K : set V} {u : V} {x : V} :
x ‚àà normal_face K u ‚Üî x ‚àà K ‚àß ‚àÄ y ‚àà K, ‚ü™x, u‚ü´_‚Ñù ‚â• ‚ü™y, u‚ü´_‚Ñù :=
begin
  simp only [normal_face, set.mem_set_of],
end

lemma normal_face_subset {K : set V} {u : V} :
normal_face K u ‚äÜ K :=
begin
  rintro x hx,
  simp only [mem_normal_face] at hx,
  tauto,
end

lemma subset_normal_face {K : set V} {u : V} {S : set V}:
S ‚äÜ normal_face K u ‚Üî S ‚äÜ K ‚àß ‚àÄ s ‚àà S, ‚àÄ y ‚àà K, ‚ü™s, u‚ü´_‚Ñù ‚â• ‚ü™y, u‚ü´_‚Ñù :=
begin
  simp only [set.subset_def, mem_normal_face],
  split,
  {
    rintro h,
    split,
    {rintro x hx, exact (h x hx).1},
    {rintro s hs y hy, exact (h s hs).2 y hy},
  },
  {
    rintro h x hx,
    split,
    {exact h.1 x hx},
    {rintro y hy, exact h.2 x hx y hy},
  }
end 

def is_face (A : set V) (F : set V) :=
F ‚äÜ A ‚àß convex ‚Ñù F ‚àß
‚àÄ x y ‚àà A, (‚àÉ z ‚àà open_segment ‚Ñù x y, z ‚àà F)
‚Üí segment ‚Ñù x y ‚äÜ F

lemma face_convex {A F: set V} (h : is_face A F) : convex ‚Ñù F :=
begin
  simp only [is_face] at h,
  cases_matching* [_ ‚àß _],
  assumption,
end

lemma face_subset {A F : set V} (h : is_face A F) : F ‚äÜ A :=
begin
  simp only [is_face] at h,
  cases_matching* [_ ‚àß _],
  assumption,
end

lemma face_absorbs_segments {A F : set V} (h : is_face A F) :
‚àÄ x y ‚àà A, (‚àÉ z ‚àà open_segment ‚Ñù x y, z ‚àà F)
‚Üí segment ‚Ñù x y ‚äÜ F :=
begin
  simp only [is_face] at h,
  cases_matching* [_ ‚àß _],
  assumption,
end

-- wrong for empty face
/- lemma polytope_face_normal {A F : set V} (h : is_polytope A) :
is_face A F ‚Üí ‚àÉ u : V, F = normal_face A u := sorry -/

/- lemma eq_inter_halfspaces_of_closed_convex
{A : set V} (Acv : convex ‚Ñù A) (Acl : is_closed A) :
‚àÉ S : set (V √ó ‚Ñù), A = ‚ãÇ pr ‚àà S, { x : V | ‚ü™x, prod.fst pr‚ü´_‚Ñù ‚â§ pr.2 } :=
sorry -/

/- lemma closedify {A : set V} {u : V} :
‚àÉ Œµ : ‚Ñù, Œµ > 0 ‚àß metric.ball u Œµ ‚äÜ A ‚Üî ‚àÉ Œµ : ‚Ñù, Œµ > 0 ‚àß metric.closed_ball u Œµ ‚äÜ A :=
begin
  admit,
end -/

lemma closedify {A : set V} {u : V} :
(‚àÉ (Œµ : ‚Ñù) (Œµpos : Œµ > 0), metric.ball u Œµ ‚äÜ A) ‚Üí ‚àÉ (Œµ : ‚Ñù) (Œµpos : Œµ > 0), metric.closed_ball u Œµ ‚äÜ A :=
begin
  rintro ‚ü®Œµ, Œµpos, Œµball‚ü©,
  refine ‚ü®Œµ / 2, half_pos Œµpos, _‚ü©,
  exact subset_trans (metric.closed_ball_subset_ball (half_lt_self Œµpos)) Œµball,
end

noncomputable def std_osegment_to_osegment (v w : V) :
open_segment ‚Ñù (0 : ‚Ñù) 1 ‚Üí open_segment ‚Ñù v w :=
begin
  intro s,
  refine ‚ü®(1 - s.val) ‚Ä¢ v + s.val ‚Ä¢ w, _‚ü©,
  rcases s with ‚ü®sval, sprop‚ü©,
  rw [open_segment_eq_Ioo (zero_lt_one : (0 : ‚Ñù) < 1), set.mem_Ioo] at sprop,
  simp only,
  refine ‚ü®1 - sval, sval, _, _, _, rfl‚ü©,
  {
    simp only [sub_pos, sprop.2],
  },
  {
    exact sprop.1,
  },
  {
    simp only [sub_add_cancel],
  },
end

lemma mem_open_segment' {x y z : V} :
z ‚àà open_segment ‚Ñù x y ‚Üî ‚àÉ c : ‚Ñù, c ‚àà set.Ioo (0 : ‚Ñù) 1 ‚àß
z = c ‚Ä¢ x + (1 - c) ‚Ä¢ y :=
begin
  rw [open_segment, set.mem_set_of],
  split,
  {
    rintro ‚ü®a, b, ha, hb, hab, rfl‚ü©,
    refine ‚ü®a, _, _‚ü©,
    {
      rw [set.mem_Ioo],
      refine ‚ü®ha, _‚ü©,
      linarith,
    },
    {
      rw [‚Üêhab, add_tsub_cancel_left],
    },
  },
  {
    rintro ‚ü®c, hc, rfl‚ü©,
    rw [set.mem_Ioo] at hc,
    refine ‚ü®c, 1 - c, _, _, _, rfl‚ü©,
    {
      exact hc.1,
    },
    {
      simp only [sub_pos, hc.2],
    },
    {
      simp only [add_sub_cancel'_right],
    },
  },
end

lemma segments_closable_of_closed {A : set V}
(h : is_closed A) :
‚àÄ x y : V, open_segment ‚Ñù x y ‚äÜ A ‚Üí segment ‚Ñù x y ‚äÜ A :=
begin
  --rw [‚Üêis_open_compl_iff] at h,
  intros x y hseg,
  intros z hz,
  rcases hz with ‚ü®a, b, ha, hb, hab, rfl‚ü©,
  by_cases hc : a = 0 ‚à® b = 0,
  {
    cases hc with hc hc,
    {
      rcases hc with rfl,
      rw [zero_add] at hab,
      rcases hab with rfl,
      rw [zero_smul, zero_add, one_smul],
      let f : ‚Ñù ‚Üí V := Œª t, t ‚Ä¢ x + (1 - t) ‚Ä¢ y,
      have fc : continuous f := by continuity,
      have : filter.tendsto f (ùìù[set.Ioo 0 1] 0) (ùìù y),
      {
        convert fc.continuous_within_at,
        simp only [f],
        simp only [zero_smul, sub_zero, zero_add, one_smul],
      },
      haveI : (ùìù[set.Ioo (0 : ‚Ñù) 1] 0).ne_bot := left_nhds_within_Ioo_ne_bot zero_lt_one,
      refine is_closed.mem_of_tendsto h this _,
      refine filter.eventually.mp
        eventually_mem_nhds_within
        (filter.eventually_of_forall _),
      intros z hz,
      apply hseg,
      simp only [mem_open_segment', f],
      exact ‚ü®z, hz, rfl‚ü©,
    },
    {
      rcases hc with rfl,
      rw [add_zero] at hab,
      rcases hab with rfl,
      rw [zero_smul, add_zero, one_smul],
      let f : ‚Ñù ‚Üí V := Œª t, t ‚Ä¢ x + (1 - t) ‚Ä¢ y,
      have fc : continuous f := by continuity,
      have : filter.tendsto f (ùìù[set.Ioo 0 1] 1) (ùìù x),
      {
        convert fc.continuous_within_at,
        simp only [f],
        simp only [one_smul, sub_self, add_zero, zero_smul],
      },
      haveI : (ùìù[set.Ioo (0 : ‚Ñù) 1] 1).ne_bot := right_nhds_within_Ioo_ne_bot zero_lt_one,
      refine is_closed.mem_of_tendsto h this _,
      refine filter.eventually.mp
        eventually_mem_nhds_within
        (filter.eventually_of_forall _),
      intros z hz,
      apply hseg,
      simp only [mem_open_segment', f],
      exact ‚ü®z, hz, rfl‚ü©,
    },
  },
  {
    push_neg at hc,
    replace ha := lt_of_le_of_ne ha (hc.1 ‚àò eq.symm),
    replace hb := lt_of_le_of_ne hb (hc.2 ‚àò eq.symm),
    apply hseg,
    simp only [open_segment],
    refine ‚ü®a, b, ha, hb, hab, rfl‚ü©,
  },
end

lemma open_segment_nonempty (x y : V) :
(open_segment ‚Ñù x y).nonempty :=
begin
  let half : ‚Ñù := 1 / 2,
  refine ‚ü®half ‚Ä¢ x + half ‚Ä¢ y, half, half, _, _, _, rfl‚ü©,
  all_goals {simp only [half]},
  {positivity},
  {positivity},
  {ring},
end

lemma tmp
{A : set V} {B : finset V}
(Ao : is_open A) (BA : ‚ÜëB ‚äÜ A) :
‚àÉ Œµ : ‚Ñù, Œµ > 0 ‚àß ‚àÄ x ‚àà B, metric.ball x Œµ ‚äÜ A :=
begin
  induction B using finset.induction with b B bB ih,
  {
    simp only [gt_iff_lt, finset.not_mem_empty, is_empty.forall_iff, forall_const, and_true],
    exact ‚ü®1, zero_lt_one‚ü©,
  },
  {
    simp only [gt_iff_lt, finset.mem_insert, forall_eq_or_imp],
    simp only [set.insert_subset, finset.coe_insert] at BA,
    rw [metric.is_open_iff] at Ao,
    obtain ‚ü®Œµ, Œµpos, Œµball‚ü© := Ao b BA.1,
    obtain ‚ü®Œ¥, Œ¥pos, Œ¥ball‚ü© := ih BA.2,
    refine ‚ü®min Œµ Œ¥, _, _, _‚ü©,
    {
      simp only [lt_min_iff],
      exact ‚ü®Œµpos, Œ¥pos‚ü©,
    },
    {
      exact subset_trans (metric.ball_subset_ball (min_le_left _ _)) Œµball,
    },
    {
      intros x xB,
      exact subset_trans (metric.ball_subset_ball (min_le_right _ _)) (Œ¥ball x xB),
    },
  },
end

lemma is_open_convex_hull
{A : set V} (Ao : is_open A) :
is_open (convex_hull ‚Ñù A) :=
begin
  rw [metric.is_open_iff],
  intros x hx,
  rw [convex_hull_eq, set.mem_set_of] at hx,
  obtain ‚ü®Œπ, t, w, z, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ, h‚ÇÑ‚ü© := hx,
  let f := finset.image z t,
  have hf : ‚Üëf ‚äÜ A,
  {
    intros y hy,
    simp only [finset.coe_image, set.mem_image, finset.mem_coe] at hy,
    obtain ‚ü®v, hv, rfl‚ü© := hy,
    exact h‚ÇÉ v hv,
  },
  obtain ‚ü®Œµ, Œµpos, Œµball‚ü© := tmp Ao hf,
  refine ‚ü®Œµ, Œµpos, _‚ü©,
  intros y hy,
  suffices hs : x ‚àà convex_hull ‚Ñù (A + {x - y}),
  {
    rw [convex_hull_add] at hs,
    simp only [convex_hull_singleton, set.add_singleton, set.image_add_right, neg_sub, set.mem_preimage, add_sub_cancel'_right] at hs,
    exact hs,
  },
  have h‚ÇÉ' : ‚àÄ i : Œπ, i ‚àà t ‚Üí z i ‚àà A + {x - y},
  {
    intros i it,
    simp only [set.add_singleton, set.image_add_right, neg_sub, set.mem_preimage],
    simp only [finset.mem_image, forall_exists_index, forall_apply_eq_imp_iff‚ÇÇ] at Œµball,
    apply Œµball i it,
    simpa only [mem_ball_iff_norm, add_sub_cancel'] using hy,
  },
  rw [convex_hull_eq, set.mem_set_of],
  refine ‚ü®Œπ, t, w, z, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ', h‚ÇÑ‚ü©,
end
