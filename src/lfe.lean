import convex convex_body brunn_minkowski microid
  measure set_pi
  init.data.fin.ops

open_locale pointwise
open_locale topological_space
open_locale nat

-- needed to get decidable_eq for sets!
open classical
local attribute [instance] prop_decidable

variables {V : Type} [inner_product_space ‚Ñù V] [finite_dimensional ‚Ñù V]


def lfe --locally face equivalent
(U : set (metric.sphere (0 : V) 1))
(P Q : polytope V) :=
‚àÄ u : metric.sphere (0 : V) 1,
u ‚àà U ‚Üí
‚àÉ (x : V) (c : ‚Ñù), c > 0 ‚àß normal_face P.val u = {x} + c ‚Ä¢ (normal_face Q.val u)

lemma lfe_refl (P : polytope V) : lfe ‚ä§ P P :=
begin
  intros u uU,
  refine ‚ü®0, 1, zero_lt_one, _‚ü©,
  simp only [one_smul, set.singleton_add, zero_add, set.image_id'],
end

lemma lfe_symm
{U : set (metric.sphere (0 : V) 1)}
{P Q : polytope V}
(h : lfe U P Q) : lfe U Q P :=
begin
  intros v hv,
  rcases h v hv with ‚ü®x, c, cpos, hxc‚ü©,
  rw [hxc],
  refine ‚ü®-c‚Åª¬π ‚Ä¢ x, c‚Åª¬π, inv_pos_of_pos cpos, _‚ü©,
  rw [smul_add, ‚Üêadd_assoc],
  simp only [neg_smul, set.smul_set_singleton,
  set.singleton_add_singleton, add_left_neg,
  set.singleton_add],
  simp only [subtype.val_eq_coe, set.image_add_left, neg_neg, set.preimage_add_left_singleton, add_left_neg, set.singleton_add,
  zero_add, set.image_id'],
  rw [inv_smul_smul‚ÇÄ (ne_of_gt cpos)],
end

lemma lfe_trans
{U‚ÇÅ U‚ÇÇ : set (metric.sphere (0 : V) 1)}
{P Q R : polytope V}
(h‚ÇÅ : lfe U‚ÇÅ P Q)
(h‚ÇÇ : lfe U‚ÇÇ Q R) : lfe (U‚ÇÅ ‚à© U‚ÇÇ) P R :=
begin
  intros v hv,
  simp only [set.mem_inter_eq] at hv,
  rcases h‚ÇÅ v hv.1 with ‚ü®x‚ÇÅ, c‚ÇÅ, c‚ÇÅpos, hxc‚ÇÅ‚ü©,
  rcases h‚ÇÇ v hv.2 with ‚ü®x‚ÇÇ, c‚ÇÇ, c‚ÇÇpos, hxc‚ÇÇ‚ü©,
  rw [hxc‚ÇÅ, hxc‚ÇÇ],
  refine ‚ü®x‚ÇÅ + c‚ÇÅ ‚Ä¢ x‚ÇÇ, c‚ÇÅ * c‚ÇÇ, _, _‚ü©,
  {
    exact mul_pos c‚ÇÅpos c‚ÇÇpos,
  },
  {
    simp only [smul_add, smul_smul, ‚Üêadd_assoc],
    simp only [set.smul_set_singleton, set.singleton_add_singleton],
  },
end

lemma lfe_mono
{U‚ÇÅ U‚ÇÇ : set (metric.sphere (0 : V) 1)}
{P Q : polytope V}
(hPQ : lfe U‚ÇÇ P Q)
(hU : U‚ÇÅ ‚äÜ U‚ÇÇ) :
lfe U‚ÇÅ P Q :=
begin
  intros u hu,
  exact hPQ u (hU hu),
end

def in_combinatorial_closure
(u : metric.sphere (0 : V) 1)
(S : set (convex_body V))
(K : convex_body V) :=
‚àÄ Ps : multiset (convex_body V), dim V = Ps.card + 2 ‚Üí
u ‚àà msupport (bm.area (K ::‚Çò Ps)) ‚Üí
u ‚àà closure (‚ãÉ L ‚àà S, msupport (bm.area (L ::‚Çò Ps)))

/- lemma mem_closure_of_mem_closure_nhd
{A U : set V} {x : V} (hU : U ‚àà ùìù x) :
x ‚àà closure A ‚Üî x ‚àà closure (A ‚à© U) := sorry

lemma mem_closure_of_mem_closure_nhd'
{A B U : set V} {x : V} (hU : U ‚àà ùìù x) (hAB : A ‚à© U = B ‚à© U) :
x ‚àà closure A ‚Üî x ‚àà closure B := sorry -/

lemma mem_closure_of_subset_within_of_mem_closure
{Œ± : Type} [topological_space Œ±]
{A B U : set Œ±} {x : Œ±} (hU : U ‚àà ùìù x) (hAB : A ‚à© U ‚äÜ B ‚à© U) :
x ‚àà closure A ‚Üí x ‚àà closure B :=
begin
  simp only [mem_closure_iff_cluster_pt, cluster_pt_iff],
  intros h X hX W hW,
  let W' := W ‚à™ A,
  have W'p : W' ‚àà filter.principal A,
  {
    apply set.subset_union_right,
  },
  obtain ‚ü®x, ‚ü®xX, xU‚ü©, xW'‚ü© := h (filter.inter_mem hX hU) W'p,
  refine ‚ü®x, xX, _‚ü©,
  cases xW' with xW xA,
  {
    exact xW,
  },
  {
    apply hW,
    apply set.inter_subset_left,
    refine hAB ‚ü®xA, xU‚ü©,
  },
end

lemma area_pos_iff_of_lfe
{P Q : polytope V} {U : set (metric.sphere (0 : V) 1)}
{Ks : multiset (convex_body V)}
(hPQ : lfe U P Q)
(hKs : dim V = Ks.card + 2) :
bm.area (convex_body_of_polytope P ::‚Çò Ks) U > 0 ‚Üî
bm.area (convex_body_of_polytope Q ::‚Çò Ks) U > 0 :=
begin
  -- partition into face relints
  -- use that faces are, up to homothety, contained in each other
  -- possibly require U to be open (no problem!)
  -- Hausdorff measure of the area segment monotone?
  admit,
end

-- MOVETO measure.lean
lemma finite_measure_mono
{Œº : measure_theory.finite_measure (metric.sphere (0 : V) 1)}
{U‚ÇÅ U‚ÇÇ : set (metric.sphere (0 : V) 1)}
(h : U‚ÇÅ ‚äÜ U‚ÇÇ) :
Œº U‚ÇÅ ‚â§ Œº U‚ÇÇ :=
begin
  simp only [measure_theory.finite_measure.coe_fn_eq_to_nnreal_coe_fn_to_measure],
  apply ennreal.to_nnreal_mono,
  {
    apply measure_theory.measure_ne_top,
  },
  {
    exact measure_theory.measure_mono h,
  },
end

lemma msupport_eq_of_lfe
{P Q : polytope V} {U : set (metric.sphere (0 : V) 1)}
{Ks : multiset (convex_body V)}
(hPQ : lfe U P Q)
(hKs : dim V = Ks.card + 2) :
msupport (bm.area (convex_body_of_polytope P ::‚Çò Ks)) ‚à© (interior U) =
msupport (bm.area (convex_body_of_polytope Q ::‚Çò Ks)) ‚à© (interior U) :=
begin
  ext,
  simp only [msupport, set.mem_inter_iff, set.mem_set_of],
  split,
  all_goals {
    rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
    refine ‚ü®_, h‚ÇÇ‚ü©,
    intros W hW,
    refine lt_of_lt_of_le _
      (finite_measure_mono (set.inter_subset_left W (interior U))),
    have : W ‚à© interior U ‚àà ùìù x,
    {
      apply filter.inter_mem hW,
      rw [mem_nhds_iff],
      refine ‚ü®interior U, subset_refl _, _, h‚ÇÇ‚ü©,
      exact is_open_interior,
    },
    replace h‚ÇÅ := h‚ÇÅ _ this,
    simpa only [area_pos_iff_of_lfe _ /- magic!? -/ hKs] using h‚ÇÅ,
    /- have hQP := lfe_symm hPQ,
    refine lfe_mono (by assumption) _,
    exact subset_trans (set.inter_subset_right W _) interior_subset, -/
  },
end

lemma comb_cl_of_lfe
{U : set (metric.sphere (0 : V) 1)}
{u : metric.sphere (0 : V) 1}
{t : ‚Ñï ‚Üí polytope V}
{S : set (polytope V)}
{tl : convex_body V}
(hU : U ‚àà nhds u)
(tt : filter.tendsto (Œª n, convex_body_of_polytope (t n))
  filter.at_top (ùìù tl))
(hl : ‚àÄ n : ‚Ñï, ‚àÉ P ‚àà S, lfe U (t n) P) :
in_combinatorial_closure u (convex_body_of_polytope '' S)
tl :=
begin
  intros Ps hdim hu,
  have := bm.area_continuous Ps _ _ _ tt,
  {
    have hiU : interior U ‚àà nhds u := interior_mem_nhds.mpr hU,
    replace := msupport_subset_of_tendsto _ _ this hu,
    simp only at this,
    refine mem_closure_of_subset_within_of_mem_closure
      hiU _ this,
    rw [set.Union‚ÇÇ_inter, set.Union_inter, set.Union_subset_iff],
    intro n,
    rcases hl n with ‚ü®P, hS, hlfe‚ü©,
    rw [msupport_eq_of_lfe hlfe hdim],
    refine subset_trans _ (set.subset_Union‚ÇÇ (convex_body_of_polytope P) _),
    {
      exact subset_refl _, -- why do I have to use subset_trans?
    },
    {
      exact set.mem_image_of_mem _ hS,
    },
  },
  {exact ‚ä§},
  {
    intro n,
    simp only [bm.is_area_coll],
    split,
    {
      simp only [dim_finrank, finrank_top, multiset.card_cons, add_assoc] at hdim ‚ä¢,
      exact hdim,
    },
    {
      intros K hK,
      simp only [convex_body_subset, submodule.top_coe, set.subset_univ],
    },
  },
end