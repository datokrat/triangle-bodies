import convex convex_body multiset brunn_minkowski microid set_pi
  microid_ops sequence pre_pruning

open_locale pointwise
open_locale topological_space
open_locale nat

-- needed to get decidable_eq for sets!
open classical
local attribute [instance] prop_decidable

variables {V : Type} [inner_product_space ‚Ñù V] [finite_dimensional ‚Ñù V]

lemma tendsto_polytope_of_tendsto_generator {k : ‚Ñï}
{t : ‚Ñï ‚Üí microid_generator_space V k}
{tl : microid_generator_space V k}
(tt : filter.tendsto t filter.at_top (ùìù tl)) :
filter.tendsto (Œª n, convex_body_of_polytope (polytope_of_microid_generator (t n))) filter.at_top
  (ùìù (convex_body_of_polytope (polytope_of_microid_generator tl))) :=
begin
  simp only [body_of_poly_of_gen_eq],
  exact filter.tendsto.comp (body_of_gen_continuous_at tl) tt,
end

lemma angle_self_zero {k : ‚Ñï} (m : fin k.succ) (u : metric.sphere (0 : V) 1) :
angle m m u = (Œª G : microid_generator_space V k, 0) :=
begin
  funext,
  simp only [angle, sub_self, norm_zero, div_zero],
end

lemma cuspiness_eq_angle {k : ‚Ñï}
(u : metric.sphere (0 : V) 1) (t : prune_triple V k) :
cuspiness u t = angle (prune_secondary_index t) (prune_cusp_index t) u (prune_triple_generator t) :=
begin
  simp only [cuspiness, angle, prune_direction, prune_cusp,
  prune_secondary, prune_gen_fn, prune_triple_generator],
end

lemma fun_eq_lambda {Œ± Œ≤ : Type} (f : Œ± ‚Üí Œ≤) :
f = (Œª a, f a) := rfl

lemma diam_norm_eq_one {k : ‚Ñï}
{G : unbounded_microid_generator V k} (h : diam_generator' G > 0) :
diam_generator' (norm_generator' G) = 1 :=
begin
  cases diam_norm_generator G,
  {assumption},
  {linarith},
end

lemma pruning_lemma' {k : ‚Ñï} {u : metric.sphere (0 : V) 1}
{t : ‚Ñï ‚Üí prune_triple V k}
(valid : ‚àÄ n : ‚Ñï, valid_prune_triple (t n) u)
-- (is_cusp : ‚àÄ n : ‚Ñï, prune_cusp_index (t n) ‚àà generator_face (prune_triple_generator (t n)) u)
(tt : filter.tendsto ((cuspiness u) ‚àò t) filter.at_top (ùìù (0 : ‚Ñù))) :
‚àÉ (c : ‚Ñï) (G : microid_generator_space V c),
c ‚â§ k ‚àß
vector_span ‚Ñù (polytope_of_microid_generator G).val ‚â† ‚ä• ‚àß
vector_span ‚Ñù (polytope_of_microid_generator G).val ‚â§ vector_orth u.val ‚àß
in_combinatorial_closure u
((body_of_microid_generator ‚àò prune_triple_generator ‚àò t) '' set.univ)
(body_of_microid_generator G) :=
begin
  have is_cusp : ‚àÄ n : ‚Ñï, prune_cusp_index (t n) ‚àà generator_face (prune_triple_generator (t n)) u,
  {
    intro n,
    simp only [generator_face, finset.mem_coe, finset.mem_filter],
    refine ‚ü®finset.mem_fin_range _, (valid n).1‚ü©,
  },
  let s :=
  Œª n : ‚Ñï, (prune_cusp_index (t n), prune_secondary_index (t n)),
  -- have hs : ‚àÄ n, (s n).nonempty := Œª n, generator_face_nonempty (prune_triple_generator (t n)) u,
  -- rcases ex_const_mem_subseq_of_setvalued_seq hs with ‚ü®b, œï, hmon, hb‚ü©,
  rcases ex_const_subseq_of_finite_range
    (Œª n : ‚Ñï, (prune_cusp_index (t n), prune_secondary_index (t n)))
      with ‚ü®‚ü®m, l‚ü©, œï, mon, index_const‚ü©,
  simp only [prod.mk.inj_iff] at index_const,
  replace index_const := and.intro (Œª n, (index_const n).1.symm) (Œª n, (index_const n).2.symm),
  have hm : ‚àÄ n : ‚Ñï, m ‚àà generator_face (prune_triple_generator ((t ‚àò œï) n)) u,
  {
    intro n,
    rw [index_const.1],
    apply is_cusp,
  },
  -- change ‚àÄ (n : ‚Ñï), b ‚àà (s ‚àò œï) n at hb,
  rcases pre_pruning_lemma hm
    with ‚ü®c, œÜ, œï‚ÇÇ, tl, clek, ‚ü®hmon, htt, hg, ha‚ü©, exU‚ü©,
  refine ‚ü®c, tl, clek, _, _, _‚ü©,
  {
    suffices h : diam_generator' tl.val = 1,
    {
      intro vsz,
      have nz : set.subsingleton (set.range tl.val),
      {
        intros x hx y hy,
        simp only [polytope_of_microid_generator] at vsz,
        replace hx := subset_convex_hull ‚Ñù _ hx,
        replace hy := subset_convex_hull ‚Ñù _ hy,
        have := vsub_mem_vector_span ‚Ñù hx hy,
        rw [vsz] at this,
        replace this := (submodule.mem_bot ‚Ñù).mp this,
        exact eq_of_sub_eq_zero this,
      },
      have := metric.diam_subsingleton nz,
      simp only [diam_generator', set.image_univ] at h,
      linarith,
    },
    let t' := Œª n : ‚Ñï, (prunenorm_generator œÜ (prune_triple_generator (t (œï (œï‚ÇÇ n))))).val,
    suffices h‚ÇÇ : ‚àÄ n : ‚Ñï,
    diam_generator' (t' n) = 1,
    {
      have htt' : filter.tendsto t' filter.at_top (ùìù tl.val),
      {
        exact filter.tendsto.comp continuous_subtype_val.continuous_at htt,
      },
      refine lim_norm_gen htt' h‚ÇÇ,
    },
    have mœÜ : m ‚àà finset.image œÜ finset.univ,
    {
      refine ha m _,
      simp only [anglett, angle_self_zero],
      convert tendsto_const_nhds,
      tauto,
    },
    have lœÜ : l ‚àà finset.image œÜ finset.univ,
    {
      refine ha l _,
      replace tt := tendsto_subseq_of_tendsto _ mon tt,
      rw [fun_eq_lambda ((cuspiness u ‚àò t) ‚àò œï)] at tt,
      simp only [function.comp_app, cuspiness_eq_angle] at tt,
      simp only [anglett],
      convert tt,
      funext n,
      simp only [function.comp_app],
      rw [index_const.1 n, index_const.2 n],
    },
    rcases finset.mem_image.mp mœÜ with ‚ü®pm, -, rfl‚ü©,
    rcases finset.mem_image.mp lœÜ with ‚ü®pl, -, rfl‚ü©,
    intro n,
    simp only [t', prunenorm_generator],
    refine diam_norm_eq_one _,
    simp only [diam_generator', chop_generator, chop_generator'],
    have hd : dist ((prune_triple_generator (t (œï (œï‚ÇÇ n)))).val (œÜ pm))
                   ((prune_triple_generator (t (œï (œï‚ÇÇ n)))).val (œÜ pl)) > 0,
    {
      rw [gt_iff_lt, dist_pos],
      rw [index_const.1 (œï‚ÇÇ n), index_const.2 (œï‚ÇÇ n)],
      simp only [valid_prune_triple] at valid,
      exact (valid _).2,
    },
    refine lt_of_lt_of_le hd _,
    simp only [set.image_univ],
    exact metric.dist_le_diam_of_mem (pi_range_bounded _) ‚ü®pm, rfl‚ü© ‚ü®pl, rfl‚ü©,
  },
  {
    simp only [vector_span, polytope_of_microid_generator],
    simp only [set_vsub_eq_sub],
    rw [‚Üêconvex_hull_sub],
    rw [submodule.span_le],
    refine convex_hull_subset_vector_space _ _ _,
    intros v hv,
    change v ‚àà vector_orth u.val,
    rw [mem_vector_orth],
    rcases hv with ‚ü®a, b, ‚ü®pa, rfl‚ü©, ‚ü®pb, rfl‚ü©, rfl‚ü©,
    simp only [generator_face, finset.mem_coe, finset.mem_filter] at hg,
    apply le_antisymm,
    all_goals {
      simp only [inner_sub_left, sub_nonpos, sub_nonneg],
      refine (hg _).2 _,
    },
  },
  {
    have bodytt := filter.tendsto.comp (body_of_gen_continuous_at tl) htt,
    have polytt := tendsto_polytope_of_tendsto_generator htt,
    rw [set.image_comp],
    rcases exU with ‚ü®U, hU, hlfe‚ü©,
    let S := polytope_of_microid_generator '' (prune_triple_generator ‚àò t '' set.univ),
    have : in_combinatorial_closure u (convex_body_of_polytope '' S) _,
    {
      refine comb_cl_of_lfe hU polytt _,
      simp only [S],
      rw [‚Üêset.image_comp],
      intro n,
      refine ‚ü®polytope_of_microid_generator (prune_triple_generator (t (œï (œï‚ÇÇ n)))), _, _‚ü©,
      {
        refine ‚ü®œï (œï‚ÇÇ n), set.mem_univ _, rfl‚ü©,
      },
      {
        apply lfe_symm,
        exact hlfe n,
      },
    },
    rw [‚Üêset.image_comp] at this,
    convert this,
    all_goals {
      funext,
      simp only [function.comp_app, body_of_poly_of_gen_eq],
    },
  },
end

def fin_retraction {k‚ÇÅ k‚ÇÇ : ‚Ñï} (h : k‚ÇÅ ‚â§ k‚ÇÇ) (l : fin k‚ÇÇ.succ) : fin k‚ÇÅ.succ :=
‚ü®min l.val k‚ÇÅ, lt_of_le_of_lt (min_le_right _ _) (nat.lt_succ_self _)‚ü©

lemma fin_retraction_comp_incl {k‚ÇÅ k‚ÇÇ : ‚Ñï} (h : k‚ÇÅ ‚â§ k‚ÇÇ) :
fin_retraction h ‚àò fin.cast_le (nat.succ_le_succ h) = id :=
begin
  funext,
  simp only [fin_retraction, fin.val_eq_coe, fin.coe_cast_le,
    function.comp_app, id.def],
  apply fin.coe_injective,
  simp only [fin.val_eq_coe, fin.coe_cast_le, fin.coe_mk, min_eq_left_iff],
  exact nat.le_of_lt_succ x.property,
end

def convert_generator {k‚ÇÅ k‚ÇÇ : ‚Ñï} (h : k‚ÇÅ ‚â§ k‚ÇÇ) (G : microid_generator_space V k‚ÇÅ) :
microid_generator_space V k‚ÇÇ :=
begin
  refine ‚ü®G.val ‚àò (fin_retraction h), _‚ü©,
  have Gmem := G.property,
  simp only [mem_closed_ball_zero_iff] at Gmem ‚ä¢,
  apply (pi_norm_le_iff zero_le_one).mpr,
  simp only [function.comp_app],
  intro i,
  exact (pi_norm_le_iff zero_le_one).mp Gmem (fin_retraction h i),
end

lemma polytope_convert_eq {k‚ÇÅ k‚ÇÇ : ‚Ñï} (h : k‚ÇÅ ‚â§ k‚ÇÇ) (G : microid_generator_space V k‚ÇÅ) :
polytope_of_microid_generator (convert_generator h G) =
polytope_of_microid_generator G :=
begin
  simp only [polytope_of_microid_generator, convert_generator],
  simp only [subtype.mk_eq_mk],
  refine congr_arg _ _,
  apply le_antisymm,
  {
    exact set.range_comp_subset_range _ _,
  },
  {
    conv {
      to_lhs,
      rw [‚Üêfunction.comp.right_id G.val, ‚Üêfin_retraction_comp_incl h,
        ‚Üêfunction.comp.assoc],
    },
    exact set.range_comp_subset_range _ _,
  },
end

lemma body_convert_eq {k‚ÇÅ k‚ÇÇ : ‚Ñï} (h : k‚ÇÅ ‚â§ k‚ÇÇ) (G : microid_generator_space V k‚ÇÅ) :
body_of_microid_generator (convert_generator h G) =
body_of_microid_generator G :=
begin
  simp only [‚Üêbody_of_poly_of_gen_eq],
  rw [polytope_convert_eq h],
end

lemma pruning_lemma {k : ‚Ñï} {u : metric.sphere (0 : V) 1}
{t : ‚Ñï ‚Üí prune_triple V k}
(valid : ‚àÄ n : ‚Ñï, valid_prune_triple (t n) u)
(tt : filter.tendsto ((cuspiness u) ‚àò t) filter.at_top (ùìù (0 : ‚Ñù))) :
‚àÉ (G : microid_generator_space V k),
vector_span ‚Ñù (polytope_of_microid_generator G).val ‚â† ‚ä• ‚àß
vector_span ‚Ñù (polytope_of_microid_generator G).val ‚â§ vector_orth u.val ‚àß
in_combinatorial_closure u
((body_of_microid_generator ‚àò prune_triple_generator ‚àò t) '' set.univ)
(body_of_microid_generator G) :=
begin
  rcases pruning_lemma' valid tt with
    ‚ü®c, G', hle, hG'‚ü©,
  let G := convert_generator hle G',
  refine ‚ü®convert_generator hle G', _‚ü©,
  simp only [polytope_convert_eq hle, body_convert_eq hle],
  exact hG',
end
